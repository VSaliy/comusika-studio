package com.frinika.gui.util.panel;

import com.frinika.gui.util.LanguageUtils;
import com.frinika.gui.util.OkCancelListener;
import com.frinika.gui.util.WindowUtils;
import com.frinika.gui.util.handler.CloseControlHandler;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;

/**
 * Basic close control panel.
 *
 * @author hajdam
 */
@ParametersAreNonnullByDefault
public class CloseControlPanel extends javax.swing.JPanel implements CloseControlHandler.CloseControlService {

    private final java.util.ResourceBundle resourceBundle;
    private CloseControlHandler handler;
    private OkCancelListener okCancelListener;

    public CloseControlPanel() {
        this(LanguageUtils.getResourceBundleByClass(CloseControlPanel.class));
    }

    public CloseControlPanel(java.util.ResourceBundle resourceBundle) {
        this.resourceBundle = resourceBundle;
        initComponents();

        okCancelListener = new OkCancelListener() {
            @Override
            public void okEvent() {
                performCloseClick();
            }

            @Override
            public void cancelEvent() {
                performCloseClick();
            }
        };
        init();
    }
    
    private void init() {
        WindowUtils.assignGlobalKeyListener(this, okCancelListener);
    }

    public void setHandler(CloseControlHandler handler) {
        this.handler = handler;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();

        closeButton.setText(resourceBundle.getString("closeButton.text")); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        if (handler != null) {
            handler.controlActionPerformed();
        }
    }//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void performCloseClick() {
        WindowUtils.doButtonClick(closeButton);
    }

    @Nonnull
    @Override
    public OkCancelListener getOkCancelListener() {
        return okCancelListener;
    }

    @Nonnull
    @Override
    public CloseControlHandler.CloseControlEnablementListener createEnablementListener() {
        return closeButton::setEnabled;
    }
}
