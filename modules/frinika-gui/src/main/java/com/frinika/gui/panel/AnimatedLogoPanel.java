/*
 * http://www.frinika.com
 * 
 * This file is part of Frinika.
 * 
 * Frinika is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * Frinika is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with Frinika; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package com.frinika.gui.panel;

import com.frinika.gui.util.WindowUtils;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import javax.swing.Icon;
import javax.swing.JLabel;

/**
 * Panel for animated logo.
 *
 * @author hajdam
 */
public class AnimatedLogoPanel extends javax.swing.JPanel {

    private JLabel light_label;
    private JLabel light_cloud1;
    private JLabel light_cloud2;
    private int cloud_width;
    private Thread animation;

    public AnimatedLogoPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layeredPane = new javax.swing.JLayeredPane();

        setLayout(new java.awt.BorderLayout());

        layeredPane.setPreferredSize(new java.awt.Dimension(470, 400));

        javax.swing.GroupLayout layeredPaneLayout = new javax.swing.GroupLayout(layeredPane);
        layeredPane.setLayout(layeredPaneLayout);
        layeredPaneLayout.setHorizontalGroup(
            layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 618, Short.MAX_VALUE)
        );
        layeredPaneLayout.setVerticalGroup(
            layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 328, Short.MAX_VALUE)
        );

        add(layeredPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void init() {
        boolean darkMode = WindowUtils.isDarkMode();
        setBackground(darkMode ? Color.BLACK : Color.WHITE);
        setMinimumSize(new Dimension(470, 260));
        setPreferredSize(new Dimension(470, 260));

        Icon logoImage = new javax.swing.ImageIcon(AnimatedLogoPanel.class.getResource(WindowUtils.isDarkMode() ? "/frinika-studio-dark.png" : "/frinika.png"));
        JLabel welcomeLabel = new JLabel(logoImage);
        welcomeLabel.setLocation(22, 43);
        welcomeLabel.setSize(logoImage.getIconWidth(), logoImage.getIconHeight());
        layeredPane.add(welcomeLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layeredPane.setBackground(Color.red);

        addAnimatedLogo();
    }

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeDialog(new AnimatedLogoPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane layeredPane;
    // End of variables declaration//GEN-END:variables

    private void addAnimatedLogo() {
        // Toolkit toolkit = Toolkit.getDefaultToolkit();
        GraphicsEnvironment ge = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsConfiguration gc = ge.getDefaultScreenDevice().getDefaultConfiguration();
        if (gc == null) {
            gc = getGraphicsConfiguration();
        }

        /*if(gc != null) {
	    	windowSize = gc.getBounds();
	    } else {
	    	windowSize = new java.awt.Rectangle(toolkit.getScreenSize());
	    } */
        // Dimension size = layeredPanel.getSize();
        Icon frinika_light = new javax.swing.ImageIcon(AnimatedLogoPanel.class.getResource("/com/frinika/resources/frinika_light_gradient.png"));
        light_label = new JLabel(frinika_light);
        light_label.setLocation(-400, 60);
        light_label.setSize(frinika_light.getIconWidth(), frinika_light.getIconHeight());
        layeredPane.add(light_label, javax.swing.JLayeredPane.MODAL_LAYER);

        Icon frinika_cloud = new javax.swing.ImageIcon(AnimatedLogoPanel.class.getResource("/com/frinika/resources/frinika_score.png"));
        cloud_width = frinika_cloud.getIconWidth();
        light_cloud1 = new JLabel(frinika_cloud);
        light_cloud1.setLocation(cloud_width, 75);
        light_cloud1.setSize(frinika_light.getIconWidth(), frinika_light.getIconHeight());
        layeredPane.add(light_cloud1, javax.swing.JLayeredPane.MODAL_LAYER);
        light_cloud2 = new JLabel(frinika_cloud);
        light_cloud2.setLocation(0, 75);
        light_cloud2.setSize(frinika_light.getIconWidth(), frinika_light.getIconHeight());
        layeredPane.add(light_cloud2, javax.swing.JLayeredPane.MODAL_LAYER);

        Icon frinika_overscan = new javax.swing.ImageIcon(AnimatedLogoPanel.class.getResource("/com/frinika/resources/frinika_overscan.png"));
        JLabel light_overscan = new JLabel(frinika_overscan);
        light_overscan.setLocation(22, 43);
        light_overscan.setSize(frinika_overscan.getIconWidth(), frinika_overscan.getIconHeight());
        layeredPane.add(light_overscan, javax.swing.JLayeredPane.POPUP_LAYER);

        createAnimationThread();
        animation.start();
    }

    private void createAnimationThread() {
        animation = new Thread() {
            boolean active = true;
            Runnable gui = new Runnable() {
                @Override
                public void run() {
                    Point loc1 = light_cloud1.getLocation();
                    loc1.x -= 1;
                    if (loc1.x < -cloud_width) {
                        loc1.x += 2 * cloud_width;
                    }
                    light_cloud1.setLocation(loc1);
                    Point loc2 = light_cloud2.getLocation();
                    loc2.x -= 1;
                    if (loc2.x < -cloud_width) {
                        loc2.x += 2 * cloud_width;
                    }
                    light_cloud2.setLocation(loc2);

                    Point loc = light_label.getLocation();
                    loc.x += 3;
                    if (loc.x > 350) {
                        loc.x = -400;
                    }
                    light_label.setLocation(loc);
                    if (!isVisible()) {
                        active = false;
                    }
                }
            };

            @Override
            public void run() {
                while (active) {
                    gui.run();
                    try {
                        Thread.sleep(70);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
    }
}
